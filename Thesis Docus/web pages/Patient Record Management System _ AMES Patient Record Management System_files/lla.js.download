var _llat = new Object({
    version: "3.000",
    window: window,
    document: document,
    navigator: navigator,
    llFormTracker: true,
    formDelayDuration: 1100,
    readyToSubmit: false,
    disableFormValidation: false, /*deprecated*/
    disableAutoFormSubmit: false,
    autoCreateHiddenFormFields: false,
    llDelegateFormTrack: false,
    ignoreRepost: false,
    disableClickTracking: false, /*deprecated*/
    pageClickTracking: true,
    fieldFillTracking: true,
    handlePrefill: true,
    formFullTracker: false,
    submitLiteHidden: false,
    formActionMessage: '',
    scriptHost: "analytics.leadlifesolutions.net",
    domain: "",
    campaign: "",
    trackerCookieName: "__llat",
    trackerCookieDuration: 168,
    leadGUID: "",
    userEmail: "",
    userPurlKey: "",
    keyword: "",
    baseServerUrl: "",
    fullUrl: document.location.href,
    path: document.location.protocol + "//" + document.location.host + document.location.pathname,
    query: document.location.search,
    pageTitle: "",
    logger: null,
    pageTrackingInterval: 10000,
    pageTrackingLimit: 15,
    fieldNames: {
        browser: "ll_b",
        browserVersion: "ll_bv",
        campaign: "ll_c",
        callback: "ll_cb",
        chunkCount: "ll_cc",
        chunkData: "ll_cd",
        chunkId: "ll_ci",
        cookie: "ll_ck",
        chunkSequence: "ll_cs",
        debug: "ll_d",
        date: "ll_dt",
        disableTracking: "ll_dtr",
        domain: "ll_dn",
        leadGUID: "ll_id",
        email: "ll_e",
        purlKey: "ll_pk",
        field: "ll_fd",
        fieldValue: "ll_fdv",
        form: "ll_f",
        keyword: "ll_k",
        lead: "ll_l",
        method: "ll_m",
        messageId: "ll_mi",
        referrer: "ll_r",
        title: "ll_t",
        trackingData: "ll_td",
        messageTrackId: "ll_ti",
        messageTrackType: "ll_tt",
        url: "ll_u",
        version: "ll_v"
    },
    eventTypes: {
        click: "PageClick",
        pageView: "PageView",
        submit: "FormFill",
        fieldFill: "FieldFill",
        submitButtonClick: "SubmitButtonClick"
    },
    methods: {
        fieldFill: "FieldFill",
        formSubmit: "Submit",
        pageClick: "PageClick",
        getPrefillData: "GetPrefillData",
        getTrackingData: "GetTrackingData",
        track: "Track"
    },
    leadProperties: null,
    requiredClass: "required"
});

_llat.getPrefillData = function () {

    try {
        this.sendToServer({
            method: _llat.methods.getPrefillData,
            url: _llat.baseServerUrl,
            callback: true,
            data: _llat.baseQueryString() +
                    "&" + _llat.fieldNames.method + "=" + _llat.encode(_llat.methods.getPrefillData) +
                    "&" + _llat.fieldNames.messageTrackType + "=" + _llat.encode(_llat.eventTypes.fieldFill) +
                    "&" + _llat.fieldNames.callback + "=" + _llat.encode("lla.getPrefillData_Callback")
        });
    }
    catch (e) {

    }
}

_llat.setKeyword = function () {

    if (this.keyword.length == 0) {
        var trackerCookie = _llat.readCookie(llat.trackerCookieName);
        var keywordFromCookie = _llat.getVariable(_llat.fieldNames.keyword, trackerCookie);
        var keywordFromQueryString = _llat.getQueryVariable(_llat.fieldNames.keyword);
        var source = "";
        if (keywordFromQueryString.length > 0) {
            source = "querystring";
            this.keyword = keywordFromQueryString
            this.updateTrackerCookie(_llat.fieldNames.keyword, this.keyword);

            // if campaign comes in one querystring, want to clear campaign
            this.campaign = ""
            this.updateTrackerCookie(_llat.fieldNames.campaign, this.campaign);
        }
        else
            if (keywordFromCookie.length > 0) {
                source = "cookie";
                this.keyword = keywordFromCookie;
            }
    }
};

_llat.setCampaign = function () {
    try {

        if (this.campaign.length == 0) {

            var trackerCookie = _llat.readCookie(llat.trackerCookieName);
            if (trackerCookie == undefined)
                return;

            var campaignFromCookie = _llat.getVariable(_llat.fieldNames.campaign, trackerCookie);
            var campaignFromQueryString = _llat.getQueryVariable(_llat.fieldNames.campaign);
            var source = "";

            if (campaignFromQueryString.length > 0) {
                source = "querystring";
                this.campaign = campaignFromQueryString

                this.updateTrackerCookie(_llat.fieldNames.campaign, this.campaign);

                // if campaign comes in one querystring, want to clear keyword
                this.keyword = "";
                this.updateTrackerCookie(_llat.fieldNames.keyword, this.keyword);
            }
            else
                if (campaignFromCookie.length > 0) {
                    source = "cookie";
                    this.campaign = campaignFromCookie;
                }
        }
    } catch (e) { }
};

_llat.setPageTracking = function (counter) {

    if (!counter)
        counter = 0;

    var pageTrackerId = _llat.getPageTracker();

    if (!pageTrackerId || pageTrackerId.length == 0) {
        _llat.setPageTracker(_llat.getUUID());
    }

    _llat.send_pageTracking();

    if (_llat.pageTrackingInterval > 0 && _llat.pageTrackingLimit > 0) {
        setTimeout(
            function () {

                if (counter < _llat.pageTrackingLimit)
                    _llat.setPageTracking(counter + 1);
            },
            _llat.pageTrackingInterval);
    }
};

_llat.send_pageTracking = function () {

    try {
        if (!_llat.disablePageViewTracking) {
            lla.trackEvent(_llat.getPageTracker(), _llat.eventTypes.pageView);
        }
    }
    catch (e) {
    }
};

_llat.setEmail = function (email) {

    // initialize if null
    if (!email) email = "";

    // if not set, try getting from querystring 
    if (email.length <= 0)
        email = this.getQueryVariable(_llat.fieldNames.email);

    // if not set, try getting from cookie
    if (email.length <= 0) {
        var trackerCookieValue = this.readCookie(this.trackerCookieName);
        email = this.getVariable(_llat.fieldNames.email, trackerCookieValue);
    }

    this.userEmail = email;
    this.userPurlKey = this.getPurlKey(_llat.fieldNames.purlKey);

    this.leadGUID = this.getQueryVariable(_llat.fieldNames.leadGUID);

    if (this.leadGUID != null && this.leadGUID.length <= 0) {

        var trackerCookieValue = this.readCookie(this.trackerCookieName);
        this.leadGUID = this.getVariable(_llat.fieldNames.leadGUID, trackerCookieValue);
    }

    if (this.userEmail.length > 0) {
        var trackerCookie = _llat.readCookie(_llat.trackerCookieName);
        var emailFromCookie = _llat.getVariable(_llat.fieldNames.email, trackerCookie);

        if (emailFromCookie != _llat.userEmail) {
            _llat.updateTrackerCookie(_llat.fieldNames.email, _llat.userEmail);
        }
    }

    if (this.leadGUID != null && this.leadGUID.length > 0) {

        var trackerCookie = _llat.readCookie(_llat.trackerCookieName);
        var leadUIDFromCookie = _llat.getVariable(_llat.fieldNames.leadGUID, trackerCookie);
        if (leadUIDFromCookie != _llat.leadGUID) {
            _llat.updateTrackerCookie(_llat.fieldNames.leadGUID, _llat.leadGUID);
        }
    }
};

_llat.trackPageView = function (title, url) { // new function to send pageview message for title and url
    if (!_llat.disablePageViewTracking) {
        _llat.fullUrl = url;
        _llat.pageTitle = title;
        _llat.setPageTracker(_llat.getUUID());
        lla.trackEvent(
            _llat.getPageTracker(),
            _llat.eventTypes.pageView
        );
    }
};

_llat.trackLinkClick = function (text, href) {
    llat.sendToServer({
        method: llat.eventTypes.click,
        url: llat.baseServerUrl,
        callback: false,
        data: llat.baseQueryString() +
          "&" + llat.fieldNames.method + "=" + llat.encode(llat.methods.pageClick) +
          "&" + llat.fieldNames.field + "=" + llat.encode(text) +
          "&" + llat.fieldNames.fieldValue + "=" + llat.encode(href) +
          "&" + llat.fieldNames.messageTrackId + "=" + llat.encode(llat.getUUID()) +
          "&" + llat.fieldNames.messageTrackType + "=" + llat.encode(llat.eventTypes.click),
        sync: true,
        chunk: false
    });
};

_llat.baseQueryString = function (value) { // change to function to allow url to be changed in messages
    return _llat.fieldNames.domain + "=" + _llat.encode(_llat.domain) +
        "&" + _llat.fieldNames.version + "=" + _llat.encode(_llat.version) +
        "&" + _llat.fieldNames.url + "=" + _llat.encode(_llat.fullUrl) + // changed from location.href
        "&" + _llat.fieldNames.title + "=" + _llat.encode(_llat.pageTitle) +
        "&" + _llat.fieldNames.campaign + "=" + _llat.encode(_llat.campaign) +
        "&" + _llat.fieldNames.email + "=" + _llat.encode(_llat.userEmail) +
        "&" + _llat.fieldNames.purlKey + "=" + _llat.encode(_llat.userPurlKey) +
        "&" + _llat.fieldNames.leadGUID + "=" + _llat.encode(_llat.leadGUID) +
        "&" + _llat.fieldNames.browser + "=" + _llat.encode(escape(navigator.appName)) +
        "&" + _llat.fieldNames.browserVersion + "=" + _llat.encode(escape(navigator.appVersion)) +
        "&" + _llat.fieldNames.referrer + "=" + _llat.encode(escape(document.referrer)) +
        "&" + _llat.fieldNames.keyword + "=" + _llat.encode(_llat.keyword);
};

_llat.liteFormQueryString = function (value) { // change to function to allow url to be changed in messages
    return _llat.fieldNames.domain + "=" + _llat.encode(_llat.domain) +
        "&" + _llat.fieldNames.url + "=" + _llat.encode(_llat.fullUrl) + // changed from location.href
        "&" + _llat.fieldNames.title + "=" + _llat.encode(_llat.pageTitle) +
        "&" + _llat.fieldNames.campaign + "=" + _llat.encode(_llat.campaign) +
        "&" + _llat.fieldNames.email + "=" + _llat.encode(_llat.userEmail) +
        "&" + _llat.fieldNames.leadGUID + "=" + _llat.leadGUID +
        "&" + _llat.fieldNames.lead + "=" + _llat.encode("inline") +
        "&" + _llat.fieldNames.keyword + "=" + _llat.encode(_llat.keyword);
};

_llat.encode = function (value) {
    return llBase64.encode(value);
};

_llat.decode = function (value) {
    return llBase64.decode(value);
};

_llat.getQueryVariable = function (variable) {

    try {
        /// make sure it does not contain a =
        variable = variable.replace(/=/, "").toLowerCase();

        var query = window.location.search.substring(1);
        var vars = query.split("&");
        for (var i = 0; i < vars.length; i++) {
            var pair = vars[i].split("=");
            if (pair[0].toLowerCase() == variable) {
                return unescape(pair[1]).replace(/\+/g, " ");
            }
        }
        return "";
    }
    catch (e) {
        return "";
    }
};

_llat.getPurlKey = function (variable) {

    try {
        variable = variable.replace(/=/, "").toLowerCase();

        var query = window.location.search;
        var purlURL = window.location.href;

        purlURL = purlURL.replace(query, "");
        purlURL = purlURL.replace("//", "/");

        var vars = purlURL.split("/");
        if (vars.length >= 5) {
            return unescape(vars[4]).replace(/\+/g, " ");
        }
        return "";
    }
    catch (e) {
        return "";
    }
};

_llat.getVariable = function (variable, source) {

    variable = variable.replace(/=/, "").toLowerCase();

    if (source.indexOf("?") >= 0) {
        var sourceParts = source.split("?");
        if (sourceParts.length > 1) {
            source = sourceParts[1];
        }
    }

    var variableValue = "";
    var query = source;
    var vars = query.split("&");
    for (var i = 0; i < vars.length; i++) {
        var pair = vars[i].split("=");
        if (pair[0].toLowerCase() == variable) {
            variableValue = pair[1];
            break;
        }
    }

    return variableValue;
};

_llat.deleteCookie = function (name) {
    var path = "/";
    var domain = document.location.host;
    var cookieValue = _llat.readCookie(name);
    if (cookieValue.length > 0) {
        document.cookie = name + "=" +
            ((path) ? ";path=" + path : "") +
            ((domain) ? ";domain=" + domain : "") +
            ";expires=Thu, 01-Jan-1970 00:00:01 GMT";
    }
};

_llat.readCookie = function (name) {

    var cookieValue = "";
    var nameEQ = name + "=";
    var ca = document.cookie.split(';');

    for (var i = 0; (i < ca.length); i++) {
        var c = ca[i];
        while (c.charAt(0) == ' ') {
            c = c.substring(1, c.length);
        }
        if (c.indexOf(nameEQ) == 0) {
            var value = c.substring(nameEQ.length, c.length);
            cookieValue = llBase64.decode(value);
            break;
        }
    }

    return cookieValue;
};

_llat.writeCookie = function (name, value, hours) {
    try {

        if (name == null || name == undefined || value == null || value == undefined)
            return;

        var cookieValue = llBase64.encode(value);

        if (hours) {
            var date = new Date();
            date.setTime(date.getTime() + (hours * 60 * 60 * 1000));
            document.cookie = name + "=" + cookieValue + "; expires=" + date.toGMTString() + "; path=/";
        }
        else
            document.cookie = name + "=" + cookieValue + "; path=/";
    } catch (e) { }
};

_llat.updateTrackerCookie = function (name, value) {

    name = name + "=";
    var nameValue = name + value;

    var trackerCookie = this.readCookie(_llat.trackerCookieName);

    if (trackerCookie.indexOf(name) != -1) {
        var Cookiez = "";
        var changes = 0;
        var cookies = trackerCookie.replace("?", "&").split("&");
        var queries = nameValue.replace("?", "&").split("&");
        for (var inx = 0; inx < queries.length; inx++) {
            var quer = queries[inx].split("=");
            var que = quer[0].toLowerCase();
            if ((que == _llat.fieldNames.campaign) ||
            (que == _llat.fieldNames.keyword) ||
            (que == _llat.fieldNames.domain) ||
            (que == _llat.fieldNames.date) ||
            (que == _llat.fieldNames.email)) {
                for (var iny = 1; iny < cookies.length; iny++) {
                    var cook = cookies[iny].split("=");
                    if (cook.length > 1) {
                        var coo = cook[0].toLowerCase();
                        if (coo == que) {
                            if (cookies[iny].toLowerCase() != queries[inx].toLowerCase()) {
                                cookies[iny] = queries[inx];
                                ++changes;
                            }
                            que = "";
                            break;
                        }
                    }
                }
                if (que > "") {
                    Cookiez += "&" + queries[inx];
                }
            }
        }
        if (changes > 0) {
            trackerCookie = cookies.join("&");
        }
        if (trackerCookie.indexOf("?") < 0) {
            var quest = trackerCookie.indexOf("&");
            if (quest > 0) {
                trackerCookie = trackerCookie.substr(0, quest) + "?" + trackerCookie.substr(quest + 1);
            }
        }
    }
    else
        trackerCookie += ("&" + nameValue);

    this.deleteCookie(this.trackerCookieName);
    this.writeCookie(this.trackerCookieName, trackerCookie, this.trackerCookieDuration);
};

_llat.setHiddenFormField = function (form, name, value) {
    var input = document.createElement("input");
    input.setAttribute("type", "hidden");
    input.setAttribute("name", name);
    input.setAttribute("value", value);
    form.appendChild(input);
};

_llat.setFieldFillHandler = function (form) {

    try {

        if (!_llat.fieldFillTracking)
            return;

        if (form == null || form == undefined)
            return;

        for (i = 0; i < form.elements.length; i++) {
            var fieldObj = form.elements[i];
            var fieldType = fieldObj.type;

            if (fieldType == 'hidden' || fieldType == 'password')
                continue;

            if (fieldType == 'text') {

                var onblur = fieldObj.onblur;

                fieldObj.onblur = function () {

                    lla.trackFieldFillEvent(form, this.name, this.value);

                    if (onblur !== null) { onblur(); }
                };
            }
            else {

                var onchange = fieldObj.onchange;

                fieldObj.onchange = function () {
                    var val = this.value;
                    if (this.type == 'checkbox')
                        val = this.checked;

                    lla.trackFieldFillEvent(form, this.name, val);

                    if (onchange !== null) { onchange(); }

                };
            }
        }
    } catch (e) {

    }
};

_llat.setPrefillHandler = function (form) {

    try {

        if (llat.handlePrefill == null || llat.handlePrefill == undefined || llat.handlePrefill == false)
            return;

        var data = llat.leadProperties;

        for (var i = 0; i < form.elements.length; i++) {
            var element = form.elements[i];
            var elementName = element.name;

            if (elementName == undefined || elementName == null || elementName == "" || elementName.toLowerCase() == "password")
                continue;

            var elementType = element.type.toLowerCase();

            if (elementType == undefined || elementType == null || elementType == "")
                continue;

            if (elementType == "submit"
              || elementType == "reset"
              || elementType == "button"
              || elementType == "image"
              || elementType == "hidden"
              || elementType == "password") {
                continue;
            }

            for (var n = 0; n < data.length; n++) {
                try {
                    var nameToCheck = data[n].SystemProperty;

                    if (nameToCheck != null && elementName.toLowerCase() == nameToCheck.toLowerCase() && form.elements[i].value == "") {
                        if (data[n].Value != null && data[n].Value != "") {
                            form.elements[i].value = data[n].Value;
                            break;
                        }
                    }

                    nameToCheck = data[n].MappedField;

                    if (nameToCheck != null && elementName.toLowerCase() == nameToCheck.toLowerCase() && form.elements[i].value == "") {
                        if (data[n].Value != null && data[n].Value != "") {
                            form.elements[i].value = data[n].Value;
                            break;
                        }
                    }

                } catch (ie) {
                }
            }
        }
    }
    catch (e) {

    }
};

_llat.sendFormDataById = function (formId) {
    try {
        var form = document.getElementById(formId);
        if (form != null)
            _llat.sendFormData(form);
    }
    catch (e) {
    }
};

_llat.sendFormDataByName = function (formName) {

    try {
        var form = null;
        for (var formCounter = 0; formCounter < document.forms.length; formCounter++) {
            var thisForm = document.forms[formCounter];
            if (_llat.getFormName(thisForm) == formName) {
                form = thisForm;
                break;
            }
        }

        if (form != null)
            _llat.sendFormData(form);
    }
    catch (e) {
    }
};

_llat.sendFormData = function (form) {
    try {

        var emailFound = _llat.doesFormHaveEmailField(form);

        if (!emailFound)
            return;

        var thisFormName = _llat.getFormName(form);
        if (thisFormName == null)
            thisFormName = "";
        var nameValStr = _llat.getQueryStringForFormSubmit(form);

        var dataVal = _llat.liteFormQueryString() +
          "&" + nameValStr +
          "&" + _llat.fieldNames.form + "=" + _llat.encode(thisFormName) +
          "&" + _llat.fieldNames.messageTrackType + "=" + _llat.encode(_llat.eventTypes.submit) +
          "&" + _llat.fieldNames.method + "=" + _llat.encode(_llat.methods.formSubmit);

        _llat.sendToServer({
            method: _llat.methods.formSubmit,
            url: llat.baseServerUrl,
            callback: false,
            data: dataVal,
            sync: true,
            chunk: false
        });
    }
    catch (e) { }
};

_llat.submitFormById = function (formId) {

    try {
        var form = document.getElementById(formId);
        if (form != null)
            return _llat.submitForm(form);
        else
            return true;
    }
    catch (e) { return true; }
};

_llat.submitFormByName = function (formName) {
    try {
        var form = null;
        for (var formCounter = 0; formCounter < document.forms.length; formCounter++) {
            var thisForm = document.forms[formCounter];
            if (_llat.getFormName(thisForm) == formName) {
                form = thisForm;
                break;
            }
        }
        if (form != null)
            return _llat.submitForm(form);
        else
            return true;
    }
    catch (e) { return true; }
};

_llat.submitForm = function (form) {

    if (llat.formFullTracker)
        return llat.setFormFullSubmitHandler(form, form.action);
    else
        return llat.setFormLiteSubmitHandler(form);
};

_llat.setFormLiteSubmitHandler = function (form) {

    try {

        var emailFound = _llat.doesFormHaveEmailField(form);

        if (!emailFound)
            return;

        if (!_llat.readyToSubmit) {

            if (!_llat.disableFormValidation && !_llat.disableAutoFormSubmit) {

                var validationPassed = _llat.areRequiredFormFieldsSet(form);
                if (!validationPassed)
                    return false;
            }

            var thisFormName = _llat.getFormName(form);
            var nameValStr = _llat.getQueryStringForFormSubmit(form);

            var dataVal = _llat.liteFormQueryString() +
              "&" + nameValStr +
              "&" + _llat.fieldNames.form + "=" + _llat.encode(thisFormName) +
              "&" + _llat.fieldNames.messageTrackType + "=" + _llat.encode(_llat.eventTypes.submit) +
              "&" + _llat.fieldNames.method + "=" + _llat.encode(_llat.methods.formSubmit);

            try {

                _llat.sendToServer({
                    method: _llat.methods.formSubmit,
                    url: llat.baseServerUrl,
                    callback: false,
                    data: dataVal,
                    sync: true,
                    chunk: false
                });

            }
            catch (e) {
                return true;
            }

            setTimeout(function () {
                _llat.readyToSubmit = true;
                form.submit();
            }, _llat.formDelayDuration);
        }

        return _llat.readyToSubmit;
    }
    catch (e2) {
        return true;
    }
};

/* deprecated */
_llat.setFormHandlerG2 = function (destinationUrl) {

    for (var formCounter = 0; formCounter < document.forms.length; formCounter++) {
        var form = document.forms[formCounter];
        _llat.setFormFullSubmitHandler(form, destinationUrl);
    }
};

_llat.createCoreHiddenFormFields = function (form, destinationUrl) {

    try {

        var emailFound = _llat.doesFormHaveEmailField(form);

        if (!emailFound)
            return;

        _llat.setHiddenFormField(form, _llat.fieldNames.title, document.title);
        _llat.setHiddenFormField(form, _llat.fieldNames.url, encodeURIComponent(_llat.fullUrl));
        _llat.setHiddenFormField(form, _llat.fieldNames.form, _llat.getFormName(form));
        _llat.setHiddenFormField(form, _llat.fieldNames.domain, _llat.domain);

        var trackerCookie = _llat.readCookie(_llat.trackerCookieName);
        var campaignFromCookie = _llat.getVariable(_llat.fieldNames.campaign, trackerCookie);
        var campaignFromQueryString = _llat.getQueryVariable(_llat.fieldNames.campaign);
        var campaignVal = campaignFromCookie;
        if (campaignFromQueryString != null && campaignFromQueryString != "")
            campaignVal = campaignFromQueryString;

        var keywordFromCookie = _llat.getVariable(_llat.fieldNames.keyword, trackerCookie);
        var keywordFromQueryString = _llat.getQueryVariable(_llat.fieldNames.keyword);
        var keywordVal = keywordFromCookie;
        if (keywordFromQueryString != null && keywordFromQueryString != "")
            keywordVal = keywordFromQueryString;

        _llat.setHiddenFormField(form, _llat.fieldNames.campaign, campaignVal);
        _llat.setHiddenFormField(form, _llat.fieldNames.keyword, keywordVal);

    } catch (e) { }
};

_llat.setFormFullSubmitHandler = function (form, destinationUrl) {

    try {

        if (llat.llFormTracker) {

            if (form == null || form == undefined)
                return;

            var emailFound = _llat.doesFormHaveEmailField(form);

            if (!emailFound)
                return;

            var trackerCookie = _llat.readCookie(llat.trackerCookieName);

            var campaignFromCookie = llat.getVariable(llat.fieldNames.campaign, trackerCookie);
            var campaignFromQueryString = llat.getQueryVariable(llat.fieldNames.campaign);
            var campaignVal = campaignFromCookie;
            if (campaignFromQueryString != null && campaignFromQueryString != "")
                campaignVal = campaignFromQueryString;

            var keywordFromCookie = llat.getVariable(llat.fieldNames.keyword, trackerCookie);
            var keywordFromQueryString = llat.getQueryVariable(llat.fieldNames.keyword);
            var keywordVal = keywordFromCookie;
            if (keywordFromQueryString != null && keywordFromQueryString != "")
                keywordVal = keywordFromQueryString;

            var thisAction = form.action;
            thisAction = llat.convertRelativeToAbsolute(thisAction);

            var emailQueryString = llat.getQueryVariable("email");
            var leadUIDQueryString = llat.getQueryVariable(llat.fieldNames.leadGUID);
            var localPurlKey = llat.getPurlKey(llat.fieldNames.purlKey);

            if (destinationUrl != null && destinationUrl != "undefined" && destinationUrl != "") {
                llat.ignoreRepost = true;
                thisAction = llat.convertRelativeToAbsolute(destinationUrl);
            }

            _llat.setHiddenFormField(form, llat.fieldNames.leadGUID, leadUIDQueryString);
            _llat.setHiddenFormField(form, "ll_durl", encodeURIComponent(thisAction));
            _llat.setHiddenFormField(form, "ll_url_email", emailQueryString);
            _llat.setHiddenFormField(form, "ll_purl_key", localPurlKey);
            _llat.setHiddenFormField(form, "ll_ignoreRepost", llat.ignoreRepost);
            _llat.setHiddenFormField(form, llat.fieldNames.campaign, campaignVal);
            _llat.setHiddenFormField(form, llat.fieldNames.keyword, keywordVal);
            _llat.setHiddenFormField(form, llat.fieldNames.title, document.title);
            _llat.setHiddenFormField(form, llat.fieldNames.url, encodeURIComponent(llat.fullUrl));
            _llat.setHiddenFormField(form, llat.fieldNames.form, _llat.getFormName(form));
            _llat.setHiddenFormField(form, llat.fieldNames.domain, llat.domain);

            var destinationProtocol = (thisAction.toLowerCase().indexOf('https://') == 0 ? "https://" : "http://");

            var newAction = destinationProtocol + llat.scriptHost + "/FormSubmit.aspx";
            if (form.method == "get") {
                newAction += "?ll_rurl=" + encodeURIComponent(thisAction);
            }

            if (!_llat.disableFormValidation && !_llat.disableAutoFormSubmit) {
                form.onsubmit = function () {
                    return _llat.areRequiredFormFieldsSet(this);
                }
            }
            form.action = newAction;
        }
    } catch (e) {

    }
};

_llat.areRequiredFormFieldsSet = function (form) {

    try {

        var validationPassed = true;
        for (i = 0; i < form.elements.length; i++) {

            var element = form.elements[i];
            var elementValue = element.value;
            var elementType = element.type.toLowerCase();
            var required = element.getAttribute("class");
            if (required == undefined || required == null)
                required = element.getAttribute("className");

            if (required != undefined && required != null) {
                var isRequired = required == null ? false : (required.toLowerCase().indexOf(_llat.requiredClass) >= 0 ? true : false);

                if (isRequired) {
                    var noValue = false;
                    if (elementType == "checkbox") {
                        noValue = !element.checked;
                    }
                    else {
                        if (elementValue == "") {
                            noValue = true;
                        }
                    }

                    if (noValue) {
                        var elementTitle = element.getAttribute("title");
                        var message = " is required";
                        if (elementTitle != null && elementTitle.length > 0) {
                            message = elementTitle + message;
                        }
                        else {
                            message = "Element " + message;
                        }
                        alert(message);

                        element.focus();
                        validationPassed = false;
                        break;
                    }
                }
            }
        }

        return validationPassed;

    } catch (ex) {
        return true;
    }
}

_llat.getQueryStringForFormSubmit = function (form) {

    var nameValStr = "";

    try {

        for (i = 0; i < form.elements.length; i++) {
            try {

                var element = form.elements[i];
                var elementName = element.name;
                var value = element.value;

                if (elementName == undefined || elementName == null || elementName == "" || elementName.toLowerCase() == "password")
                    continue;

                var elementType = element.type.toLowerCase();

                if (elementType == undefined || elementType == null || elementType == "")
                    continue;

                if (elementType == "submit"
                    || elementType == "reset"
                    || elementType == "button"
                    || elementType == "image"
                    || elementType == "password") {
                    continue;
                }

                if (elementType == "hidden" && !_llat.submitLiteHidden)
                    continue;

                switch (elementType) {

                    case "select-multiple":

                        value = "";
                        var x = 0;
                        for (x = 0; x < element.length; x++) {
                            if (element[x].selected) {
                                value += (value == "" ? "" : ",") + element[x].value;
                            }
                        }
                        break;

                    case "checkbox":
                        value = element.checked;
                        break;

                    case "radio":
                        if (!element.checked) {
                            elementName = "";
                            value = "";
                        }
                        break;

                    default:
                        break;
                }

                if (elementName != "")
                    nameValStr += "&" + elementName + "=" + value;

            } catch (e1) {

            }
        }
    }
    catch (e2) {

    }
    return nameValStr;
};

_llat.convertRelativeToAbsolute = function (url) {

    if (/^(https?|file|ftps?|mailto|javascript|data:image\/[^;]{2,9};):/i.test(url)) {
        return url;
    }

    var base_url = location.href.match(/^(.+)\/?(?:#.+)?$/)[0] + "/";

    if (url.substring(0, 2) == "//")
        return location.protocol + url;
    else if (url.charAt(0) == "/")
        return location.protocol + "//" + location.host + url;
    else if (url.substring(0, 2) == "./")
        url = "." + url;
    else if (/^\s*$/.test(url))
        return ""; //Empty = Return nothing
    else url = "../" + url;

    url = base_url + url;
    var i = 0
    while (/\/\.\.\//.test(url = url.replace(/[^\/]+\/+\.\.\//g, "")));

    /* Escape certain characters to prevent XSS */
    url = url.replace(/\.$/, "").replace(/\/\./g, "").replace(/"/g, "%22")
        .replace(/'/g, "%27").replace(/</g, "%3C").replace(/>/g, "%3E");

    return url;
};

_llat.logLocal = function (message) {

};

_llat.doesFormHaveEmailField = function (form) {

    var emailFound = false;

    try {
        for (i = 0; i < form.elements.length; i++) {

            var formElemObj = form.elements[i];

            if (formElemObj == null || formElemObj.name == null || formElemObj.name == undefined)
                continue;

            if (formElemObj.name.toLowerCase() == "email") {
                emailFound = true;
                break;
            }
        }

        if (!emailFound) {

            var data = _llat.leadProperties;
            if (data != null && data.length > 0) {

                for (i = 0; i < form.elements.length; i++) {

                    var formElemObj = form.elements[i];

                    if (formElemObj == null || formElemObj.name == null || formElemObj.name == undefined)
                        continue;

                    var elemName = formElemObj.name.toLowerCase();

                    for (var n = 0; n < data.length; n++) {
                        try {
                            var nameToCheck = data[n].MappedField;
                            if (nameToCheck != null) {
                                if (nameToCheck.toLowerCase() == elemName) {
                                    if (data[n].SystemProperty == "Email") {
                                        emailFound = true;
                                        break;
                                    }
                                }
                            }
                        } catch (ie) {
                        }
                    }
                }
            }
        }
    } catch (err) { }

    return true; // emailFound
};

_llat.cleanString = function (string) {
    return llJson2.quote(string);
};

_llat.sendToServer = function (args) {

    try {

        if (args && args.method && args.url) {

            if (args.callback) {
                this.sendMessage({
                    method: args.method,
                    url: args.url,
                    data: args.data
                });
            }
            else {
                _llat.sendImage(args.url + "?" + args.data + "&" + _llat.fieldNames.messageId + "=" + _llat.getUUID());
            }
        }
    } catch (e) {

    }
};

_llat.sendImage = function (url) {
    var request = new Image(1, 1);

    request.onload = function () {
        request.onload = null;
        request.onerror = null
    };
    request.onerror = function () {
        request.onload = null;
        request.onerror = null
    }
    request.src = url;
}

_llat.sendMessage = function (args) {
    try {

        var script,
			  head = document.head || document.documentElement;

        script = document.createElement("script");
        script.async = true;
        script.src = args.url + "?" + args.data;

        script.onload = function (_, isAbort) {

            if (isAbort || !script.readyState || /loaded|complete/.test(script.readyState)) {

                // Handle memory leak in IE
                script.onload = script.onreadystatechange = null;

                // Remove the script
                if (script.parentNode) {
                    script.parentNode.removeChild(script);
                }

                // Dereference the script
                script = null;

                // Callback if not abort
                if (!isAbort) {
                    //callback( 200, "success" );
                }
            }
        };

        head.insertBefore(script, head.firstChild);
    }
    catch (e) {

    }
};

_llat.getUUID = function () {

    var s = [];
    var hexDigits = "0123456789ABCDEF";
    for (var i = 0; i < 32; i++) {
        s[i] = hexDigits.substr(Math.floor(Math.random() * 0x10), 1);
    }
    s[12] = "4";  // bits 12-15 of the time_hi_and_version field to 0010
    s[16] = hexDigits.substr((s[16] & 0x3) | 0x8, 1);  // bits 6-7 of the clock_seq_hi_and_reserved to 01

    var uuid = s.join("");
    return uuid;
}

_llat.getFormName = function (form) {
    var formName = "";
    try {
        if (form != null) {
            formName = form.getAttribute("name");
            if (formName == null || formName == "") {
                formName = form.getAttribute("id");
            }
        }
    } catch (e) {

    }
    return formName;
}

_llat.setPageTracker = function (val) {
    try {
        document.getElementById('ll_pageTrackerId').value = val;
    } catch (e) {

    }
};

_llat.getPageTracker = function () {
    try {
        return document.getElementById('ll_pageTrackerId').value;
    } catch (e) {

    }
};

_llat.Tracker = function (domain) {
    var global = this;
    global.document = document;
    global.window = window;
    global.ja = Math.round((new Date).getTime() / 1000);

    llat = _llat;
    llat.domain = domain;

    global.init = function () {

        try {

            if (llat.baseServerUrl.length == 0)
                llat.baseServerUrl = llaJsHost + llat.scriptHost.toLowerCase().replace("www.", "") + "/lla.aspx";

            try {
                if (document.forms.length == 0) {
                    if (document.body != null) {
                        var input = document.createElement("input");
                        input.setAttribute("type", "hidden");
                        input.setAttribute("id", "ll_pageTrackerId");
                        document.body.appendChild(input);
                    }
                }
            } catch (err) { }

            if (llat.handlePrefill) {//(llat.leadGUID != undefined && llat.leadGUID != null && llat.leadGUID.length > 0) {
                llat.getPrefillData();
            }

            if (document.forms.length > 0) {

                var form1 = document.forms[0];
                var input = document.createElement("input");
                input.setAttribute("type", "hidden");
                input.setAttribute("id", "ll_pageTrackerId");
                form1.appendChild(input);

                if (llat.autoCreateHiddenFormFields == true && !llat.llFormTracker) {
                    try {
                        for (var formCounter = 0; formCounter < document.forms.length; formCounter++) {
                            var form = document.forms[formCounter];
                            llat.createCoreHiddenFormFields(form, form.action);
                        }
                    } catch (e) { }
                }

                if (llat.llFormTracker) {

                    for (var formCounter = 0; formCounter < document.forms.length; formCounter++) {

                        var form = document.forms[formCounter];

                        if (llat.formList != undefined && llat.formList != null) {
                            var formList = llat.formList.split(',');
                            for (var x = 0; x < formList.length; x++) {
                                var useForm = formList[0];
                                if (useForm == llat.getFormName(form)) {
                                    if (llat.llFormTracker) {
                                        if (llat.formFullTracker && llat.llDelegateFormTrack == false)
                                            llat.setFormFullSubmitHandler(form, form.action);
                                        else {
                                            if (!llat.disableFormValidation && !llat.disableAutoFormSubmit) {
                                                form.onsubmit = function () {
                                                    return llat.setFormLiteSubmitHandler(this);
                                                }
                                            }
                                        }
                                    }
                                    llat.setFieldFillHandler(form);
                                }
                            }
                        }
                        else {

                            if (llat.llFormTracker && llat.llDelegateFormTrack == false) {
                                if (llat.formFullTracker) {
                                    llat.setFormFullSubmitHandler(form, form.action);
                                }
                                else {
                                    if (!llat.disableFormValidation && !llat.disableAutoFormSubmit) {
                                        form.onsubmit = function () {
                                            return llat.setFormLiteSubmitHandler(this);
                                        }
                                    }
                                }
                            }
                            llat.setFieldFillHandler(form);
                        }
                    }
                }
            }

            try {
                if (llat.pageClickTracking) {

                    var anchors = document.getElementsByTagName("a");

                    for (var i = 0; i < anchors.length; i++) {
                        var link = anchors[i];

                        if (link.target == null || link.target == undefined || link.target == '') {
                            if (link.href.toLowerCase().indexOf('.pdf') > -1) {

                                link.onclick = function () {
                                    var lText = (this.title == '' ? this.text : this.title);
                                    return lla.trackPageClickEvent(lText, this.href);
                                };
                            }
                        }
                        else if (link.target == '_blank') {
                            if (link.href.toLowerCase().indexOf('.pdf') > -1) {
                                link.addEventListener('click', function () {
                                    var lText = (this.title == '' ? this.text : this.title);
                                    _llat.trackLinkClick(lText, this.href);
                                }, false)
                            }
                        }
                    }
                }
            }
            catch (pctEx) { }

            // Get the page title 
            llat.pageTitle = document.title;
            if (document.getElementsByName) {
                var metaArray = document.getElementsByName("PageTitle");
                if (metaArray.length > 0) {
                    var metaTitle = metaArray[0].content;
                    if (metaTitle != null && metaTitle != "") {
                        llat.pageTitle = metaTitle;
                    }
                }
            }

            llat.pageTitle = llat.pageTitle.replace("&", "");

            var trackerCookieValue = llat.readCookie(llat.trackerCookieName);

            if (trackerCookieValue == "" || trackerCookieValue == "undefined") {

                trackerCookieValue = llat.fullUrl;

                if (trackerCookieValue.indexOf(_llat.fieldNames.domain) < 0) {
                    trackerCookieValue += "&" + _llat.fieldNames.domain + "=" + llat.domain;
                }

                var cookieDate = new Date().toGMTString();

                if (cookieDate.indexOf("GMT") >= 0)
                    cookieDate = cookieDate.replace("GMT", "UTC");

                trackerCookieValue += "&date=" + cookieDate;
            }

            llat.writeCookie(llat.trackerCookieName, trackerCookieValue, llat.trackerCookieDuration);

            llat.setCampaign();
            llat.setKeyword();
            llat.setEmail();
            llat.setPageTracking();


        }
        catch (e) {

        }

        return;
    };

    global.trackEvent = function (trackId, trackType) {

        try {
            llat.sendToServer({
                method: llat.methods.track,
                url: llat.baseServerUrl,
                callback: false,
                data: llat.baseQueryString() +
                    "&" + llat.fieldNames.method + "=" + llat.encode(_llat.methods.track) +
                    "&" + llat.fieldNames.messageTrackId + "=" + llat.encode(trackId) +
                    "&" + llat.fieldNames.messageTrackType + "=" + llat.encode(trackType),
                sync: true,
                chunk: false
            });
        }
        catch (e) {

        }
    };

    global.trackFieldFillEvent = function (form, field, value) {

        try {

            llat.sendToServer({
                method: llat.eventTypes.fieldFill,
                url: llat.baseServerUrl,
                callback: false,
                data: llat.baseQueryString() +
                    "&" + llat.fieldNames.method + "=" + llat.encode(llat.methods.fieldFill) +
                    "&" + llat.fieldNames.form + "=" + llat.encode(llat.getFormName(form)) +
                    "&" + llat.fieldNames.field + "=" + llat.encode(field) +
                    "&" + llat.fieldNames.fieldValue + "=" + llat.encode(value) +
                    "&" + llat.fieldNames.messageTrackId + "=" + llat.encode(llat.getUUID()) +
                    "&" + llat.fieldNames.messageTrackType + "=" + llat.encode(llat.eventTypes.fieldFill),
                sync: true,
                chunk: false
            });

            if (field.toLowerCase() == 'email') {
                llat.setEmail(value);
            }
        }
        catch (e) {

        }
    };

    global.trackPageClickEvent = function (text, href) {

        try {
            if (text == null || text == undefined)
                text = "";

            _llat.trackLinkClick(text, href);

            setTimeout(function () {
                document.location = href;
            }, 300);
            return false;
        }
        catch (e) {
            return true;
        }
    };

    global.getPrefillData_Callback = function (result) {

        try {

            var leadPropertiesJson = llat.decode(result);
            llat.leadProperties = llJson2.parse(leadPropertiesJson);

            if (document.forms.length > 0) {

                for (var formCounter = 0; formCounter < document.forms.length; formCounter++) {

                    var form = document.forms[formCounter];

                    if (llat.formList != undefined && llat.formList != null) {
                        var formList = llat.formList.split(',');
                        for (var x = 0; x < formList.length; x++) {
                            var useForm = formList[0];
                            if (useForm == llat.getFormName(form)) {
                                llat.setPrefillHandler(form);
                            }
                        }
                    }
                    else {
                        llat.setPrefillHandler(form);
                    }
                }

            }

        }
        catch (e) {

        }
    };

};

_llat.getTracker = function (domain) {
    var a = new _llat.Tracker(domain);
    return a;
};

_llat.addLoadEvent = function (func) {

    window.onload = func;
};

_llat.load = function (domain, loadNow) {

    try {
        function alpha() {

            if (lla == null) {
                lla = _llat.getTracker(domain);
                lla.init();
            }
        };

        _llat.addLoadEvent(alpha);

    }
    catch (e) {
    }
};

var lla = null;
var llBase64 = new Object({ _keyStr: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=" }); llBase64.encode = function (input) { var output = ""; var chr1; var chr2; var chr3; var enc1; var enc2; var enc3; var enc4; var i = 0; input = llBase64._utf8_encode(input); while (i < input.length) { chr1 = input.charCodeAt(i++); chr2 = input.charCodeAt(i++); chr3 = input.charCodeAt(i++); enc1 = chr1 >> 2; enc2 = ((chr1 & 3) << 4) | (chr2 >> 4); enc3 = ((chr2 & 15) << 2) | (chr3 >> 6); enc4 = chr3 & 63; if (isNaN(chr2)) { enc3 = enc4 = 64; } else { if (isNaN(chr3)) { enc4 = 64; } } output = output + this._keyStr.charAt(enc1) + this._keyStr.charAt(enc2) + this._keyStr.charAt(enc3) + this._keyStr.charAt(enc4); } return output; }; llBase64.decode = function (input) { var output = ""; var chr1; var chr2; var chr3; var enc1; var enc2; var enc3; var enc4; var i = 0; input = input.replace(/[^A-Za-z0-9\+\/\=]/g, ""); while (i < input.length) { enc1 = this._keyStr.indexOf(input.charAt(i++)); enc2 = this._keyStr.indexOf(input.charAt(i++)); enc3 = this._keyStr.indexOf(input.charAt(i++)); enc4 = this._keyStr.indexOf(input.charAt(i++)); chr1 = (enc1 << 2) | (enc2 >> 4); chr2 = ((enc2 & 15) << 4) | (enc3 >> 2); chr3 = ((enc3 & 3) << 6) | enc4; output = output + String.fromCharCode(chr1); if (enc3 != 64) { output = output + String.fromCharCode(chr2); } if (enc4 != 64) { output = output + String.fromCharCode(chr3); } } output = llBase64._utf8_decode(output); return output; }; llBase64._utf8_encode = function (string) { string = string.replace(/\r\n/g, "\n"); var utftext = ""; for (var n = 0; n < string.length; n++) { var c = string.charCodeAt(n); if (c < 128) { utftext += String.fromCharCode(c); } else { if ((c > 127) && (c < 2048)) { utftext += String.fromCharCode((c >> 6) | 192); utftext += String.fromCharCode((c & 63) | 128); } else { utftext += String.fromCharCode((c >> 12) | 224); utftext += String.fromCharCode(((c >> 6) & 63) | 128); utftext += String.fromCharCode((c & 63) | 128); } } } return utftext; }; llBase64._utf8_decode = function (utftext) { var string = ""; var i = 0; var c = c1 = c2 = 0; while (i < utftext.length) { c = utftext.charCodeAt(i); if (c < 128) { string += String.fromCharCode(c); i++; } else { if ((c > 191) && (c < 224)) { c2 = utftext.charCodeAt(i + 1); string += String.fromCharCode(((c & 31) << 6) | (c2 & 63)); i += 2; } else { c2 = utftext.charCodeAt(i + 1); c3 = utftext.charCodeAt(i + 2); string += String.fromCharCode(((c & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63)); i += 3; } } } return string; };
var llJson2 = null;
if (!this.JSON2) {
    llJson2 = function () { function f(n) { return n < 10 ? '0' + n : n; }; var escapeable = /["\\\x00-\x1f\x7f-\x9f]/g; var gap; var indent; var meta = { '\b': '\\b', '\t': '\\t', '\n': '\\n', '\f': '\\f', '\r': '\\r', '"': '\\"', '\\': '\\\\' }; var rep; function quote(string) { return escapeable.test(string) ? '"' + string.replace(escapeable, function (a) { var c = meta[a]; if (typeof c === 'string') { return c; } c = a.charCodeAt(); return '\\u00' + Math.floor(c / 16).toString(16) + (c % 16).toString(16); }) + '"' : '"' + string + '"'; }; function str(key, holder) { var i; var k; var v; var length; var mind = gap; var partial; var value = holder[key]; if (value && typeof value === 'object' && typeof value.toJSON === 'function') { value = value.toJSON(key); } if (typeof rep === 'function') { value = rep.call(holder, key, value); } switch (typeof value) { case 'string': return quote(value); case 'number': return isFinite(value) ? String(value) : 'null'; case 'boolean': case 'null': return String(value); case 'object': if (!value) { return 'null'; } if (value.toUTCString) { var xx = '"\\/Date(' + value.getTime() + ')\\/"'; return xx; } gap += indent; partial = []; if (typeof value.length === 'number' && !(value.propertyIsEnumerable('length'))) { length = value.length; for (i = 0; i < length; i += 1) { partial[i] = str(i, value) || 'null'; } v = partial.length === 0 ? '[]' : gap ? '[\n' + gap + partial.join(',\n' + gap) + '\n' + mind + ']' : '[' + partial.join(',') + ']'; gap = mind; return v; } if (typeof rep === 'object') { length = rep.length; for (i = 0; i < length; i += 1) { k = rep[i]; if (typeof k === 'string') { v = str(k, value, rep); if (v) { partial.push(quote(k) + (gap ? ': ' : ':') + v); } } } } else { for (k in value) { v = str(k, value, rep); if (v) { partial.push(quote(k) + (gap ? ': ' : ':') + v); } } } v = partial.length === 0 ? '{}' : gap ? '{\n' + gap + partial.join(',\n' + gap) + '\n' + mind + '}' : '{' + partial.join(',') + '}'; gap = mind; return v; } }; return { stringify: function (value, replacer, space) { var i; gap = ''; indent = ''; if (space) { if (typeof space === 'number') { for (i = 0; i < space; i += 1) { indent += ' '; } } else if (typeof space === 'string') { indent = space; } } if (!replacer) { rep = function (key, value) { if (!Object.hasOwnProperty.call(this, key)) { return undefined; } return value; }; } else if (typeof replacer === 'function' || (typeof replacer === 'object' && typeof replacer.length === 'number')) { rep = replacer; } else { throw new Error('JSON.stringify'); } return str('', { '': value }); }, parse: function (text, reviver) { var j; function walk(holder, key) { var k, v, value = holder[key]; if (value && typeof value === 'object') { for (k in value) { if (Object.hasOwnProperty.call(value, k)) { v = walk(value, k); if (v !== undefined) { value[k] = v; } else { delete value[k]; } } } } return reviver.call(holder, key, value); }; if (/^[\],:{}\s]*$/.test(text.replace(/\\["\\\/bfnrtu]/g, '@').replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, ']').replace(/(?:^|:|,)(?:\s*\[)+/g, ''))) { var regEx = /(\"\d{4}-\d{2}-\d{2}T\d{2}:\d{2}.*?\")|(\"\\*\/Date\(.*?\)\\*\/")/g; text = text.replace(regEx, this.regExDate); j = eval('(' + text + ')'); return typeof reviver === 'function' ? walk({ '': j }, '') : j; }; throw new SyntaxError('JSON.parse'); }, regExDate: function (str, p1, p2, offset, s) { str = str.substring(1).replace('"', ''); var date = str; if (/(\/Date(.*)\/)/.test(str)) { str = str.match(/Date\((.*?)\)/)[1]; date = "new Date(" + parseInt(str) + ")"; } else { var matches = str.split(/[-,:,T,Z]/); matches[1] = (parseInt(matches[1], 0) - 1).toString(); date = "new Date(Date.UTC(" + matches.join(",") + "))"; } return date; }, quote: quote }; } ();
} else {
    llJson2 = this.JSON2;
}